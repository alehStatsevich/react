[{"D:\\react\\02proect\\src\\index.tsx":"1","D:\\react\\02proect\\src\\reportWebVitals.ts":"2","D:\\react\\02proect\\src\\App.tsx":"3","D:\\react\\02proect\\src\\components\\Header\\Header.tsx":"4","D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx":"5","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx":"6","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx":"9","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx":"10","D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"11","D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx":"12","D:\\react\\02proect\\src\\redux\\state.tsx":"13","D:\\react\\02proect\\src\\redux\\profile-reduser.tsx":"14","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx":"15"},{"size":1707,"mtime":1614860904818,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1608541342413,"results":"18","hashOfConfig":"17"},{"size":1436,"mtime":1614863132566,"results":"19","hashOfConfig":"17"},{"size":7287,"mtime":1610218194782,"results":"20","hashOfConfig":"17"},{"size":765,"mtime":1614875385643,"results":"21","hashOfConfig":"17"},{"size":723,"mtime":1610528349930,"results":"22","hashOfConfig":"17"},{"size":1987,"mtime":1614874870143,"results":"23","hashOfConfig":"17"},{"size":428,"mtime":1610289157392,"results":"24","hashOfConfig":"17"},{"size":1629,"mtime":1614860898311,"results":"25","hashOfConfig":"17"},{"size":16268,"mtime":1611240006542,"results":"26","hashOfConfig":"17"},{"size":450,"mtime":1613655520183,"results":"27","hashOfConfig":"17"},{"size":266,"mtime":1613671414551,"results":"28","hashOfConfig":"17"},{"size":4701,"mtime":1614860906405,"results":"29","hashOfConfig":"17"},{"size":1561,"mtime":1614860909419,"results":"30","hashOfConfig":"17"},{"size":1939,"mtime":1614860910110,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1hmcuqe",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},"D:\\react\\02proect\\src\\index.tsx",["71"],"\n\nimport App from \"./App\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store, {StoreType} from \"./redux/state\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\n// export type MessageType = {\n//     id: number\n//     message: string\n// }\n// export  type DialogType = {\n//\n//     id: number\n//     name: string\n// }\n// export type PostType = {\n//     id: number\n//     message: string\n//     likesCount: number\n// }\n//\n//\n// let posts: PostType[] = [\n//     {id: 1, message: 'Hi,how are you?', likesCount: 10},\n//     {id: 2, message: 'its my first post', likesCount: 18},\n//     {id: 3, message: 'i knows it', likesCount: 9}\n// ]\n// let dialogs: DialogType[] = [\n//     {id: 1, name: 'Dima'},\n//     {id: 2, name: 'Andrey'},\n//     {id: 3, name: 'Sveta'},\n//     {id: 4, name: 'Sasha'},\n//     {id: 5, name: 'Viktor'},\n//     {id: 6, name: 'Valera'}\n// ]\n// let messages: MessageType[] = [\n//     {id: 1, message: 'Hi'},\n//     {id: 2, message: 'How is your'},\n//     {id: 3, message: 'Yo'},\n//     {id: 4, message: 'Yo'},\n//     {id: 5, message: 'Yo'}\n// ]\n\n\n\n let rerenderEntireTree = () => {\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <App  dispatch={store.dispatch.bind(store)} store={store}/>\n            {/*<App posts={posts} dialogs={dialogs} messages={messages}/>*/}\n        </React.StrictMode>,\n        document.getElementById('root'));\n}\n\n rerenderEntireTree();\nstore.subscribe(rerenderEntireTree);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["72","73"],"D:\\react\\02proect\\src\\reportWebVitals.ts",[],"D:\\react\\02proect\\src\\App.tsx",["74","75"],"import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport  store,{ActionsType, StateType, StoreType} from \"./redux/state\";\n\n\ntype StatePropsType = {\n    state: StateType\n    addPost: () => void;\n    changeText: (newPostText: string) => void;\n}\ntype PropsType = {\n    store:  StoreType\n    dispatch:  (action: ActionsType )=> void\n}\n\nfunction App (props: PropsType ) {\n\n    console.log(props)\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={() => <Dialogs store={props.store}/>}/>\n                    <Route path='/profile'\n                           render={() => <Profile store={props.store}\n                               dispatch={props.store.dispatch.bind(props.store)}\n                           />}/>\n\n                </div>\n\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n// posts={props.store.getState().profilePage.posts}\n// likesCount={props.store.getState().profilePage.posts}\n// message={props.store.getState().profilePage.posts}","D:\\react\\02proect\\src\\components\\Header\\Header.tsx",[],"D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx",[],"D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx",["76","77","78"],"import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport  {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n        <a>Music</a>\r\n    </div>\r\n        <div className={s.item}>\r\n            <a>Setting</a>\r\n        </div>\r\n    </nav>\r\n\r\n}\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["79","80","81","82"],"D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx",["83","84"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType, StoreType} from \"../../redux/state\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\n\r\n\r\n\r\n\r\ntype DialogsPropsType ={\r\n    store:  StoreType\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.store.getState().dialogsPage;\r\n\r\n    let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map((m) => <Message message={m.message}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageCreator())\r\n    }\r\n    let onNewMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = event.target.value\r\n        props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogsItem}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n           <div> {messagesElements}</div>\r\n            <div>\r\n                <div><textarea value={newMessageBody}\r\n                               onChange={onNewMessageChange}\r\n                               placeholder='Enter your message'></textarea></div>\r\n                <div><button onClick={onSendMessageClick}>send</button></div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n}\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx",[],["85","86"],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx",[],["87","88"],"D:\\react\\02proect\\src\\redux\\state.tsx",[],"D:\\react\\02proect\\src\\redux\\profile-reduser.tsx",["89"],"import {PostType, ProfilePageType, StateType} from \"./state\";\r\n\r\nexport const ADD_POST = \"ADD-POST\";\r\nexport const UPDATE_NEW_POST_TEXT =\"UPDATE-NEW-POST-TEXT\";\r\n\r\n export const profileReducer = (state: ProfilePageType, action: any): ProfilePageType => {\r\n    switch (action.type) {\r\n       case ADD_POST:\r\n          let newPost: PostType = {\r\n             id: 5,\r\n             message: action.newPost,\r\n             likesCount: 0\r\n          };\r\n          state.posts.push(newPost);\r\n          state.newPostText = \"\";\r\n          return state;\r\n       case UPDATE_NEW_POST_TEXT:\r\n          state.newPostText = action.newPostText;\r\n          return state;\r\n       default:\r\n          return state;\r\n    }\r\n }\r\nexport const addPostActionCreator = ( newPost: string) => {\r\n   return{type: 'ADD-POST', newPost: newPost} as const\r\n}\r\nexport const updateNewTextActionCreator = ( newPostText: string) => {\r\n   return {type: 'UPDATE-NEW-POST-TEXT', newPostText:  newPostText} as const\r\n}\r\n // 41 урок схема\r\n//    if (action.type === 'ADD-POST') {\r\n//       let newPost: PostType = {\r\n//          id: 5,\r\n//          message: action.newPost,\r\n//          likesCount: 0\r\n//       };\r\n//       state.profilePage.posts.push(newPost);\r\n//       state.profilePage.newPostText=\"\";\r\n//       // this._callSubscriber();функция отрисовывает посты\r\n//    }\r\n//    else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n//       state.profilePage.newPostText = action.newPostText\r\n//    }\r\n//    return state\r\n// }\r\n\r\n// export default profileReducer;","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx",["90","91"],"import {DialogType, MessageType, StateType} from \"./state\";\r\nexport const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\n export const SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n type dialogsPageType  = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n }\r\n let initialState :dialogsPageType = {\r\n    messages: [\r\n       {id: 1, message: 'Hi'},\r\n       {id: 2, message: 'How is your'},\r\n       {id: 3, message: 'Yo'},\r\n       {id: 4, message: 'Yo'},\r\n       {id: 5, message: 'Yo'}\r\n    ],\r\n    dialogs: [\r\n       {id: 1, name: 'Dima'},\r\n       {id: 2, name: 'Andrey'},\r\n       {id: 3, name: 'Sveta'},\r\n       {id: 4, name: 'Sasha'},\r\n       {id: 5, name: 'Viktor'},\r\n       {id: 6, name: 'Valera'}\r\n    ],\r\n    newMessageBody: \"\"\r\n }\r\n\r\nexport  const dialogsReducer = (state: dialogsPageType, action: any): dialogsPageType => {\r\n   switch (action.type) {\r\n      case UPDATE_NEW_MESSAGE_BODY:\r\n         state.newMessageBody = action.body;\r\n         return state;\r\n      case SEND_MESSAGE: {\r\n         let body = state.newMessageBody;\r\n         state.newMessageBody = '';\r\n         state.messages.push({id: 6, message: body});\r\n         return state;\r\n     ///???????\r\n      }\r\n      default:\r\n         return state;//????????????\r\n   }\r\n}\r\nexport const sendMessageCreator = () => {\r\n   return{type: 'SEND-MESSAGE'} as const\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n   return {type: 'UPDATE-NEW-MESSAGE-BODY', body: body} as const\r\n}\r\n\r\n\r\n\r\n//  if(action.type === 'UPDATE-NEW-MESSAGE-BODY'){\r\n//       state.dialogsPage.newMessageBody = action.body;\r\n//\r\n//    }else if(action.type === 'SEND-MESSAGE'){\r\n//       let body = state.dialogsPage.newMessageBody;\r\n//       state.dialogsPage.newMessageBody = '';\r\n//       state.dialogsPage.messages.push({id: 6, message: body})\r\n//    }\r\n//\r\n//    return state;\r\n// }переделали в switch\r\n\r\n// export default dialogsReducer;",{"ruleId":"92","severity":1,"message":"93","line":7,"column":16,"nodeType":"94","messageId":"95","endLine":7,"endColumn":25},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"92","severity":1,"message":"100","line":8,"column":9,"nodeType":"94","messageId":"95","endLine":8,"endColumn":14},{"ruleId":"92","severity":1,"message":"101","line":11,"column":6,"nodeType":"94","messageId":"95","endLine":11,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":14,"column":13,"nodeType":"104","endLine":14,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":17,"column":9,"nodeType":"104","endLine":17,"endColumn":12},{"ruleId":"102","severity":1,"message":"103","line":20,"column":13,"nodeType":"104","endLine":20,"endColumn":16},{"ruleId":"92","severity":1,"message":"105","line":1,"column":16,"nodeType":"94","messageId":"95","endLine":1,"endColumn":27},{"ruleId":"92","severity":1,"message":"106","line":4,"column":22,"nodeType":"94","messageId":"95","endLine":4,"endColumn":30},{"ruleId":"92","severity":1,"message":"107","line":8,"column":7,"nodeType":"94","messageId":"95","endLine":8,"endColumn":18},{"ruleId":"92","severity":1,"message":"108","line":25,"column":9,"nodeType":"94","messageId":"95","endLine":25,"endColumn":16},{"ruleId":"92","severity":1,"message":"109","line":5,"column":9,"nodeType":"94","messageId":"95","endLine":5,"endColumn":19},{"ruleId":"92","severity":1,"message":"110","line":5,"column":21,"nodeType":"94","messageId":"95","endLine":5,"endColumn":32},{"ruleId":"96","replacedBy":"111"},{"ruleId":"98","replacedBy":"112"},{"ruleId":"96","replacedBy":"113"},{"ruleId":"98","replacedBy":"114"},{"ruleId":"92","severity":1,"message":"115","line":1,"column":36,"nodeType":"94","messageId":"95","endLine":1,"endColumn":45},{"ruleId":"92","severity":1,"message":"115","line":1,"column":34,"nodeType":"94","messageId":"95","endLine":1,"endColumn":43},{"ruleId":"92","severity":1,"message":"116","line":10,"column":6,"nodeType":"94","messageId":"95","endLine":10,"endColumn":35},"@typescript-eslint/no-unused-vars","'StoreType' is defined but never used.","Identifier","unusedVar","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"'store' is defined but never used.","'StatePropsType' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ChangeEvent' is defined but never used.","'PostType' is defined but never used.","'newPostText' is defined but never used.","'addPost' is assigned a value but never used.","'DialogType' is defined but never used.","'MessageType' is defined but never used.",["117"],["118"],["117"],["118"],"'StateType' is defined but never used.","'initialState' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]