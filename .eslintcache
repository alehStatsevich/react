[{"D:\\react\\02proect\\src\\index.tsx":"1","D:\\react\\02proect\\src\\reportWebVitals.ts":"2","D:\\react\\02proect\\src\\App.tsx":"3","D:\\react\\02proect\\src\\components\\Header\\Header.tsx":"4","D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx":"5","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx":"6","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx":"9","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx":"10","D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"11","D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx":"12","D:\\react\\02proect\\src\\redux\\state.tsx":"13","D:\\react\\02proect\\src\\redux\\profile-reduser.tsx":"14","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx":"15","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx":"16","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"17","D:\\react\\02proect\\src\\StoreContext.tsx":"18","D:\\react\\02proect\\src\\redux\\redux-store.tsx":"19"},{"size":1920,"mtime":1615048049092,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1608541342413,"results":"22","hashOfConfig":"21"},{"size":1412,"mtime":1615051898515,"results":"23","hashOfConfig":"21"},{"size":7287,"mtime":1610218194782,"results":"24","hashOfConfig":"21"},{"size":871,"mtime":1615051897528,"results":"25","hashOfConfig":"21"},{"size":723,"mtime":1610528349930,"results":"26","hashOfConfig":"21"},{"size":1897,"mtime":1615051894233,"results":"27","hashOfConfig":"21"},{"size":428,"mtime":1610289157392,"results":"28","hashOfConfig":"21"},{"size":1819,"mtime":1615051902706,"results":"29","hashOfConfig":"21"},{"size":16268,"mtime":1611240006542,"results":"30","hashOfConfig":"21"},{"size":450,"mtime":1613655520183,"results":"31","hashOfConfig":"21"},{"size":266,"mtime":1613671414551,"results":"32","hashOfConfig":"21"},{"size":4701,"mtime":1614860906405,"results":"33","hashOfConfig":"21"},{"size":1983,"mtime":1615051896758,"results":"34","hashOfConfig":"21"},{"size":2442,"mtime":1615035984912,"results":"35","hashOfConfig":"21"},{"size":1977,"mtime":1615051891809,"results":"36","hashOfConfig":"21"},{"size":3159,"mtime":1615051892442,"results":"37","hashOfConfig":"21"},{"size":337,"mtime":1614940946770,"results":"38","hashOfConfig":"21"},{"size":326,"mtime":1615051891582,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1hmcuqe",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\react\\02proect\\src\\index.tsx",[],["88","89"],"D:\\react\\02proect\\src\\reportWebVitals.ts",[],"D:\\react\\02proect\\src\\App.tsx",["90","91","92","93"],"import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport {Route} from \"react-router-dom\";\nimport  {ActionsType, StateType, StoreType} from \"./redux/state\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport store from \"./redux/redux-store\";\n\n\n// type StatePropsType = {\n//     state: StateType\n//     addPost: () => void;\n//     changeText: (newPostText: string) => void;\n// }\n// type PropsType = {\n//     store:  StoreType\n//     dispatch:  (action: ActionsType )=> void\n// }\n\nfunction App () {\n    return (\n\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={() => <DialogsContainer />}/>\n                    <Route path='/profile'\n                           render={() => <Profile/>}/>\n\n                </div>\n\n            </div>\n\n    );\n}\n\nexport default App;\n// posts={props.store.getState().profilePage.posts}\n// likesCount={props.store.getState().profilePage.posts}\n// message={props.store.getState().profilePage.posts}\n// <DialogsContainer store={props.store}/\n// <Profile store={props.store}\n//          dispatch={props.store.dispatch.bind(props.store)}\n\n","D:\\react\\02proect\\src\\components\\Header\\Header.tsx",[],"D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx",["94","95","96"],"import React from \"react\";\r\nimport Profileinfo from \"./Profileinfo/Profileinfo\"\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ActionsType, StoreType} from \"../../redux/state\";\r\nimport store from \"../../redux/redux-store\";\r\n\r\n\r\n // type ProfilePropsType = {\r\n //    store:  StoreType\r\n //     dispatch: (action: ActionsType)=> void\r\n // }\r\n\r\nconst Profile = () => {\r\n    return <div>\r\n        <Profileinfo/>\r\n        <MyPostsContainer/>\r\n\r\n    </div>\r\n\r\n}\r\nexport default Profile;\r\n//   типизация\r\n// posts: PostType[]\r\n// likesCount: PostType[]\r\n// message: PostType[]\r\n// addPost: () => void\r\n//     changeText: (newPostText: string) => void\r\n//my post\r\n// posts={props.posts}\r\n// likesCount={props.likesCount}\r\n// message={props.message}\r\n// <MyPostsContainer store={props.store}\r\n//                   dispatch={props.dispatch}/>\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx",["97","98","99"],"import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport  {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n        <a>Music</a>\r\n    </div>\r\n        <div className={s.item}>\r\n            <a>Setting</a>\r\n        </div>\r\n    </nav>\r\n\r\n}\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["100","101","102","103","104"],"import React, {ChangeEvent} from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {ActionsType, PostType, StoreType} from \"../../../redux/state\";\r\n\r\n\r\nclass newPostText {\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n    posts: PostType[]\r\n    newPostText: string\r\n     addPost: () => void\r\n    updateNewPostText: (text: string)=> void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    //ссылка ссьлающаяся на  элемент в textarea\r\n    //  let newPostElement = React.createRef();\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n        // let text = newPostElement.current.value;\r\n        // props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const changeTextarea = () => {\r\n        // if (newPostElement.current) {\r\n\r\n        let text= newPostElement.current?.value;\r\n            props.updateNewPostText(text||\"\")\r\n            // let action = updateNewTextActionCreator(text)\r\n            // props.dispatch(action)\r\n\r\n\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3> my posts</h3>\r\n        <div>\r\n            <div>\r\n                <textarea ref={newPostElement} onChange={changeTextarea}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts;\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx",["105","106","107","108","109"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType, DialogType, MessageType, StoreType} from \"../../redux/state\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\n\r\n\r\n\r\n\r\ntype DialogsPropsType ={\r\n      dialogsPage : DialogsPageType\r\n    sendMessage:()=>void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n    let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n        // props.store.dispatch(sendMessageCreator())\r\n    }\r\n    let onNewMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = event.target.value\r\n        props.updateNewMessageBody(body)\r\n        // props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogsItem}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n           <div> {messagesElements}</div>\r\n            <div>\r\n                <div><textarea value={newMessageBody}\r\n                               onChange={onNewMessageChange}\r\n                               placeholder='Enter your message'></textarea></div>\r\n                <div><button onClick={onSendMessageClick}>send</button></div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n}\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\react\\02proect\\src\\redux\\state.tsx",[],["110","111"],"D:\\react\\02proect\\src\\redux\\profile-reduser.tsx",[],"D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx",["112"],"import {DialogType, MessageType, StateType} from \"./state\";\r\nexport const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\n export const SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n type dialogsPageType  = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n }\r\n let initialState :dialogsPageType = {\r\n    messages: [\r\n       {id: 1, message: 'Hi'},\r\n       {id: 2, message: 'How is your'},\r\n       {id: 3, message: 'Yo'},\r\n       {id: 4, message: 'Yo'},\r\n       {id: 5, message: 'Yo'}\r\n    ],\r\n    dialogs: [\r\n       {id: 1, name: 'Dima'},\r\n       {id: 2, name: 'Andrey'},\r\n       {id: 3, name: 'Sveta'},\r\n       {id: 4, name: 'Sasha'},\r\n       {id: 5, name: 'Viktor'},\r\n       {id: 6, name: 'Valera'}\r\n    ],\r\n    newMessageBody: \"\"\r\n }\r\n\r\nexport  const dialogsReducer = (state= initialState, action: any): dialogsPageType => {\r\n\r\n\r\n\r\n   switch (action.type) {\r\n      case UPDATE_NEW_MESSAGE_BODY:\r\n         let stateCopy = {...state}\r\n         //поверхносная копия\r\n         stateCopy.newMessageBody = action.body;\r\n         //ретурним копи стэйт.если вернем стейт это будет тот что приходит в функцию и не будет перерисовки\r\n         return stateCopy;\r\n      case SEND_MESSAGE: {\r\n         let body = state.newMessageBody;\r\n         let stateCopy2 = {\r\n            ...state,\r\n            newMessageBody: '',\r\n            messages: [...state.messages,{id: 6, message: body}]}\r\n        //копируем месаджи и  пушим messages.push({id: 6, message: body}\r\n\r\n\r\n         return stateCopy2;\r\n     ///???????\r\n      }\r\n      default:\r\n         return state;//????????????\r\n   }\r\n}\r\nexport const sendMessageCreator = () => {\r\n   return{type: 'SEND-MESSAGE'} as const\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n   return {type: 'UPDATE-NEW-MESSAGE-BODY', body: body} as const\r\n}\r\n\r\n\r\n\r\n//  if(action.type === 'UPDATE-NEW-MESSAGE-BODY'){\r\n//       state.dialogsPage.newMessageBody = action.body;\r\n//\r\n//    }else if(action.type === 'SEND-MESSAGE'){\r\n//       let body = state.dialogsPage.newMessageBody;\r\n//       state.dialogsPage.newMessageBody = '';\r\n//       state.dialogsPage.messages.push({id: 6, message: body})\r\n//    }\r\n//\r\n//    return state;\r\n// }переделали в switch\r\n// stateCopy2.messages.push({id: 6, message: body});\r\n// export default dialogsReducer;","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx",["113","114"],"import React from \"react\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport store from \"../../redux/redux-store\";\r\n\r\nimport {Dispatch} from \"redux\";\r\nimport {StateType} from \"../../redux/state\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator())\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\n\r\nexport default DialogsContainer;\r\n\r\n// type DialogsPropsType ={\r\n//    store:  StoreType\r\n// }\r\n\r\n// const DialogsContainer = (props:DialogsPropsType ) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().dialogsPage;\r\n//\r\n//             // let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id}/>);\r\n//             // let messagesElements = state.messages.map((m) => <Message message={m.message}/>);\r\n//             // let newMessageBody = state.newMessageBody;\r\n//             let onSendMessageClick = () => {\r\n//                 store.dispatch(sendMessageCreator())\r\n//             }\r\n//             let onNewMessageChange = (body: string) => {\r\n//                 // let body = event.target.value\r\n//                 store.dispatch(updateNewMessageBodyCreator(body))\r\n//             }\r\n//\r\n//             // @ts-ignore\r\n//             return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                             sendMessage={onSendMessageClick}\r\n//                             dialogsPage={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["115","116"],"import React from \"react\";\r\n\r\nimport {addPostActionCreator, updateNewTextActionCreator} from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport store from \"../../../redux/redux-store\";\r\nimport  {StateType} from \"../../../redux/state\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: StateType ) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst  mapDispatchToProps = (dispatch:  Dispatch) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewTextActionCreator(text)\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n// export type MyPostsPropsType = {\r\n//     store:  StoreType\r\n//     dispatch: (action: ActionsType)=> void\r\n//     updateNewPostText:  (text: string) => void\r\n//     newPost: string\r\n// }\r\n//\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     // let postsElements =\r\n//     //     props.store._state.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n//     // //ссылка ссьлающаяся на  элемент в textarea\r\n//     // //  let newPostElement = React.createRef();\r\n//     // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n//     //переносим в  <StoreContext.Consumer>\r\n// //let state = props.store.getState()\r\n// //     let addPost = () => {\r\n// //         // let text = newPostElement.current.value;\r\n// //         props.store.dispatch(addPostActionCreator())\r\n// //     }\r\n// //     let changeTextarea = (text: string) => {\r\n// //         // if (newPostElement.current) {\r\n// //         //     let text = newPostElement.current.value;\r\n// //             let action = updateNewTextActionCreator(text)\r\n// //             props.store.dispatch(action)\r\n// //     }\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState().profilePage\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 let changeTextarea = (text: string) => {\r\n//                     let action = updateNewTextActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//\r\n//                 return <MyPosts updateNewPostText= {changeTextarea}\r\n//                                 addPost={addPost}\r\n//                                 posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}/>}\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\StoreContext.tsx",["117"],"D:\\react\\02proect\\src\\redux\\redux-store.tsx",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":21},{"ruleId":"122","severity":1,"message":"126","line":7,"column":23,"nodeType":"124","messageId":"125","endLine":7,"endColumn":32},{"ruleId":"122","severity":1,"message":"127","line":7,"column":34,"nodeType":"124","messageId":"125","endLine":7,"endColumn":43},{"ruleId":"122","severity":1,"message":"128","line":9,"column":8,"nodeType":"124","messageId":"125","endLine":9,"endColumn":13},{"ruleId":"122","severity":1,"message":"123","line":5,"column":9,"nodeType":"124","messageId":"125","endLine":5,"endColumn":20},{"ruleId":"122","severity":1,"message":"127","line":5,"column":22,"nodeType":"124","messageId":"125","endLine":5,"endColumn":31},{"ruleId":"122","severity":1,"message":"128","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":13},{"ruleId":"129","severity":1,"message":"130","line":14,"column":13,"nodeType":"131","endLine":14,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":17,"column":9,"nodeType":"131","endLine":17,"endColumn":12},{"ruleId":"129","severity":1,"message":"130","line":20,"column":13,"nodeType":"131","endLine":20,"endColumn":16},{"ruleId":"122","severity":1,"message":"132","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":27},{"ruleId":"122","severity":1,"message":"123","line":4,"column":9,"nodeType":"124","messageId":"125","endLine":4,"endColumn":20},{"ruleId":"122","severity":1,"message":"127","line":4,"column":32,"nodeType":"124","messageId":"125","endLine":4,"endColumn":41},{"ruleId":"122","severity":1,"message":"133","line":7,"column":7,"nodeType":"124","messageId":"125","endLine":7,"endColumn":18},{"ruleId":"122","severity":1,"message":"134","line":24,"column":9,"nodeType":"124","messageId":"125","endLine":24,"endColumn":16},{"ruleId":"122","severity":1,"message":"135","line":5,"column":26,"nodeType":"124","messageId":"125","endLine":5,"endColumn":36},{"ruleId":"122","severity":1,"message":"136","line":5,"column":38,"nodeType":"124","messageId":"125","endLine":5,"endColumn":49},{"ruleId":"122","severity":1,"message":"127","line":5,"column":51,"nodeType":"124","messageId":"125","endLine":5,"endColumn":60},{"ruleId":"122","severity":1,"message":"137","line":6,"column":9,"nodeType":"124","messageId":"125","endLine":6,"endColumn":27},{"ruleId":"122","severity":1,"message":"138","line":6,"column":29,"nodeType":"124","messageId":"125","endLine":6,"endColumn":56},{"ruleId":"118","replacedBy":"139"},{"ruleId":"120","replacedBy":"140"},{"ruleId":"122","severity":1,"message":"126","line":1,"column":34,"nodeType":"124","messageId":"125","endLine":1,"endColumn":43},{"ruleId":"122","severity":1,"message":"141","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"128","line":5,"column":8,"nodeType":"124","messageId":"125","endLine":5,"endColumn":13},{"ruleId":"122","severity":1,"message":"141","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"128","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":13},{"ruleId":"122","severity":1,"message":"141","line":2,"column":9,"nodeType":"124","messageId":"125","endLine":2,"endColumn":14},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'ActionsType' is defined but never used.","Identifier","unusedVar","'StateType' is defined but never used.","'StoreType' is defined but never used.","'store' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ChangeEvent' is defined but never used.","'newPostText' is defined but never used.","'addPost' is assigned a value but never used.","'DialogType' is defined but never used.","'MessageType' is defined but never used.","'sendMessageCreator' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.",["142"],["143"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation"]